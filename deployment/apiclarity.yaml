apiVersion: v1
kind: Namespace
metadata:
  name: apiclarity
  labels:
    istio-injection: disabled
---
apiVersion: v1
kind: Service
metadata:
  name: apiclarity
  namespace: apiclarity
  labels:
    app: apiclarity
spec:
  ports:
    - name: trace-server
      port: 9000
      protocol: TCP
      targetPort: 9000
    - name: backend
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: apiclarity
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: apiclarity
  namespace: apiclarity
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: apiclarity-pvc
  namespace: apiclarity
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: headers-to-ignore-config
  namespace: apiclarity
  labels:
    app: apiclarity
data:
  request.headers: |-
    x-forwarded-proto
    x-request-id
    x-b3-traceid
    x-b3-sampled
    x-b3-spanid
    x-span-name
    x-b3-parentspanid
    A-IM
    Accept
    Accept-Charset
    Accept-Encoding
    Accept-Language
    Accept-Datetime
    Access-Control-Request-Method
    Access-Control-Request-Headers
    Authorization
    Cache-Control
    Connection
    Content-Length
    Content-Type
    Cookie
    Date
    Expect
    Forwarded
    From
    Host
    If-Match
    If-Modified-Since
    If-None-Match
    If-Range
    If-Unmodified-Since
    Max-Forwards
    Origin
    Pragma
    Proxy-Authorization
    Range
    Referer
    TE
    User-Agent
    Upgrade
    Via
    Warning
  response.headers: |-
    x-application-context
    Access-Control-Allow-Credentials
    Access-Control-Allow-Headers
    Access-Control-Allow-Methods
    Access-Control-Allow-Origin
    Access-Control-Expose-Headers
    Access-Control-Max-Age
    Accept-Ranges
    Age
    Allow
    Alternate-Protocol
    Cache-Control
    Client-Date
    Client-Peer
    Client-Response-Num
    Connection
    Content-Disposition
    Content-Encoding
    Content-Language
    Content-Length
    Content-Location
    Content-MD5
    Content-Range
    Content-Security-Policy
    X-Content-Security-Policy
    X-WebKit-CSP
    Content-Security-Policy-Report-Only
    Content-Type
    Date
    ETag
    Expires
    HTTP
    Keep-Alive
    Last-Modified
    Link
    Location
    P3P
    Pragma
    Proxy-Authenticate
    Proxy-Connection
    Refresh
    Retry-After
    Server
    Set-Cookie
    Status
    Strict-Transport-Security
    Timing-Allow-Origin
    Trailer
    Transfer-Encoding
    Upgrade
    Vary
    Via
    Warning
    WWW-Authenticate
    X-Aspnet-Version
    X-Content-Type-Options
    X-Frame-Options
    X-Permitted-Cross-Domain-Policies
    X-Pingback
    X-Powered-By
    X-Robots-Tag
    X-UA-Compatible
    X-XSS-Protection
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apiclarity
  namespace: apiclarity
  labels:
    app: apiclarity
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apiclarity
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: apiclarity
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: apiclarity
      initContainers:
        - name: wait-for-db
          image: docker.io/bitnami/postgresql:11.13.0-debian-10-r33
          command: ['sh', '-c',
                    'until pg_isready -U "postgres" -d "dbname=apiclarity" -h apiclarity-postgresql -p 5432;
                     do echo waiting for database; sleep 2; done;']
          securityContext:
            runAsUser: 1001
      containers:
        - name: apiclarity
          image: danielvladco/apiclarity:aa69e03324739f3002893acbef5270d2736f56b9
          imagePullPolicy: Always
          args:
            - run
          env:
            # space separated list of response headers to ignore when reconstructing the spec
            - name: RESPONSE_HEADERS_TO_IGNORE
              valueFrom:
                configMapKeyRef:
                  name: headers-to-ignore-config
                  key: response.headers
            # space separated list of request headers to ignore when reconstructing the spec
            - name: REQUEST_HEADERS_TO_IGNORE
              valueFrom:
                configMapKeyRef:
                  name: headers-to-ignore-config
                  key: request.headers
            - name: DB_NAME
              value: "apiclarity"
            - name: DB_HOST
              value: "apiclarity-postgresql"
            - name: DB_PORT_NUMBER
              value: "5432"
            - name: DB_USER
              value: "postgres"
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: apiclarity-postgresql
                  key: postgresql-password
            - name: STATE_BACKUP_FILE_NAME
              value: /apiclarity/state.gob
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: 8081
            periodSeconds: 30
            failureThreshold: 5
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /healthz/live
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 30
            failureThreshold: 5
            timeoutSeconds: 10
          securityContext:
            capabilities:
              drop:
                - all
            runAsNonRoot: true
            runAsGroup: 1000
            runAsUser: 1000
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          resources:
            requests:
              memory: "200Mi"
              cpu: "100m"
            limits:
              memory: "1000Mi"
              cpu: "1000m"
          volumeMounts:
            - name: apiclarity
              mountPath: /apiclarity
      securityContext:
        fsGroup: 1000
      volumes:
        - name: apiclarity
          persistentVolumeClaim:
            claimName: apiclarity-pvc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: apiclarity
  namespace: apiclarity
rules:
- apiGroups: [ "" ]
  resources: [ "pods" ]
  verbs: [ "list", "get", "watch" ]
- apiGroups: [ "apps" ]
  resources: [ "deployments" ]
  verbs: [ "list", "get", "watch" ]
- apiGroups: [ "apps" ]
  resources: [ "replicasets" ]
  verbs: [ "list", "get", "watch" ]
- apiGroups: [""]
  resources: ["nodes", "services"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: apiclarity
  namespace: apiclarity
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: apiclarity
subjects:
  - kind: ServiceAccount
    name: apiclarity
    namespace: apiclarity
---
# helm template apiclarity --set postgresqlPassword=apiclarity,postgresqlDatabase=apiclarity bitnami/postgresql -n apiclarity
# Source: postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: apiclarity-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.1
    app.kubernetes.io/instance: apiclarity
    app.kubernetes.io/managed-by: Helm
  namespace: apiclarity
type: Opaque
data:
  postgresql-password: "YXBpY2xhcml0eQ=="
---
# Source: postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: apiclarity-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.1
    app.kubernetes.io/instance: apiclarity
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: apiclarity
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: apiclarity
---
# Source: postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: apiclarity-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.1
    app.kubernetes.io/instance: apiclarity
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: apiclarity
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: apiclarity
    role: primary
---
# Source: postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: apiclarity-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.1
    app.kubernetes.io/instance: apiclarity
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: apiclarity
spec:
  serviceName: apiclarity-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: apiclarity
      role: primary
  template:
    metadata:
      name: apiclarity-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.10.1
        app.kubernetes.io/instance: apiclarity
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:
      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: apiclarity
                    app.kubernetes.io/component: primary
                namespaces:
                  - "apiclarity"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: apiclarity-postgresql
          image: docker.io/bitnami/postgresql:11.13.0-debian-10-r33
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: apiclarity-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "apiclarity"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=apiclarity" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=apiclarity" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath:
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
