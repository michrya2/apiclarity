// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "APIClarity APIs",
    "version": "1.0.0"
  },
  "basePath": "/api",
  "paths": {
    "/apiEvents": {
      "get": {
        "summary": "Get API events",
        "parameters": [
          {
            "$ref": "#/parameters/startTime"
          },
          {
            "$ref": "#/parameters/endTime"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/apiEventSortKey"
          },
          {
            "$ref": "#/parameters/sortDir"
          },
          {
            "$ref": "#/parameters/showNonApi"
          },
          {
            "$ref": "#/parameters/methodIsFilter"
          },
          {
            "$ref": "#/parameters/pathIsFilter"
          },
          {
            "$ref": "#/parameters/pathIsNotFilter"
          },
          {
            "$ref": "#/parameters/pathStartsWithFilter"
          },
          {
            "$ref": "#/parameters/pathEndsWithFilter"
          },
          {
            "$ref": "#/parameters/pathContainsFilter"
          },
          {
            "$ref": "#/parameters/statusCodeIsFilter"
          },
          {
            "$ref": "#/parameters/statusCodeIsNotFilter"
          },
          {
            "$ref": "#/parameters/statusCodeGteFilter"
          },
          {
            "$ref": "#/parameters/statusCodeLteFilter"
          },
          {
            "$ref": "#/parameters/sourceIPIsFilter"
          },
          {
            "$ref": "#/parameters/sourceIPIsNotFilter"
          },
          {
            "$ref": "#/parameters/destinationIPIsFilter"
          },
          {
            "$ref": "#/parameters/destinationIPIsNotFilter"
          },
          {
            "$ref": "#/parameters/destinationPortIsFilter"
          },
          {
            "$ref": "#/parameters/destinationPortIsNotFilter"
          },
          {
            "$ref": "#/parameters/hasSpecDiffFilter"
          },
          {
            "$ref": "#/parameters/specDiffTypeIsFilter"
          },
          {
            "$ref": "#/parameters/specIsFilter"
          },
          {
            "$ref": "#/parameters/specIsNotFilter"
          },
          {
            "$ref": "#/parameters/specStartsWithFilter"
          },
          {
            "$ref": "#/parameters/specEndsWithFilter"
          },
          {
            "$ref": "#/parameters/specContainsFilter"
          },
          {
            "$ref": "#/parameters/destinationK8sObjectNameIsFilter"
          },
          {
            "$ref": "#/parameters/destinationK8sObjectNameIsNotFilter"
          },
          {
            "$ref": "#/parameters/sourceK8sObjectNameIsFilter"
          },
          {
            "$ref": "#/parameters/sourceK8sObjectNameIsNotFilter"
          },
          {
            "$ref": "#/parameters/bflaStatusIsFilter"
          },
          {
            "$ref": "#/parameters/bflaStatusIsNotFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "required": [
                "total"
              ],
              "properties": {
                "items": {
                  "description": "List of API events in the given time range, filters and page. List length must be lower or equal to pageSize",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ApiEvent"
                  }
                },
                "total": {
                  "description": "Total events count in the given time range and filters",
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/apiEvents/{eventId}": {
      "get": {
        "summary": "Get API event",
        "parameters": [
          {
            "type": "integer",
            "format": "uint32",
            "description": "API event ID",
            "name": "eventId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiEvent"
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/apiEvents/{eventId}/providedSpecDiff": {
      "get": {
        "summary": "Get API event provided spec diff",
        "parameters": [
          {
            "type": "integer",
            "format": "uint32",
            "description": "API event ID",
            "name": "eventId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiEventSpecDiff"
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/apiEvents/{eventId}/reconstructedSpecDiff": {
      "get": {
        "summary": "Get API event reconstructed spec diff",
        "parameters": [
          {
            "type": "integer",
            "format": "uint32",
            "description": "API event ID",
            "name": "eventId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiEventSpecDiff"
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory": {
      "get": {
        "summary": "Get API inventory",
        "parameters": [
          {
            "$ref": "#/parameters/apiType"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/apiInventorySortKey"
          },
          {
            "$ref": "#/parameters/sortDir"
          },
          {
            "$ref": "#/parameters/apiNameIsFilter"
          },
          {
            "$ref": "#/parameters/apiNameIsNotFilter"
          },
          {
            "$ref": "#/parameters/apiNameStartsWithFilter"
          },
          {
            "$ref": "#/parameters/apiNameEndsWithFilter"
          },
          {
            "$ref": "#/parameters/apiNameContainsFilter"
          },
          {
            "$ref": "#/parameters/portIsFilter"
          },
          {
            "$ref": "#/parameters/portIsNotFilter"
          },
          {
            "$ref": "#/parameters/hasProvidedSpecFilter"
          },
          {
            "$ref": "#/parameters/hasReconstructedSpecFilter"
          },
          {
            "$ref": "#/parameters/apiIdFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "required": [
                "total"
              ],
              "properties": {
                "items": {
                  "description": "List of filtered APIs in the given page. List length must be lower or equal to pageSize",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ApiInfo"
                  }
                },
                "total": {
                  "description": "Total filtered APIs count",
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory/{apiId}/provided_swagger.json": {
      "get": {
        "summary": "Get provided API spec json file",
        "parameters": [
          {
            "$ref": "#/parameters/apiId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "spec in json format",
              "type": "object"
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory/{apiId}/reconstructed_swagger.json": {
      "get": {
        "summary": "Get reconstructed API spec json file",
        "parameters": [
          {
            "$ref": "#/parameters/apiId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "spec in json format",
              "type": "object"
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory/{apiId}/specs": {
      "get": {
        "summary": "Get provided and reconstructed open api specs for a specific API",
        "parameters": [
          {
            "$ref": "#/parameters/apiId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OpenApiSpecs"
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory/{apiId}/specs/providedSpec": {
      "put": {
        "summary": "Add or edit a spec for a specific API",
        "parameters": [
          {
            "$ref": "#/parameters/apiId"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Json or Yaml representing openapi spec V2",
              "$ref": "#/definitions/rawSpec"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/rawSpec"
            }
          },
          "400": {
            "description": "Spec validation failure",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      },
      "delete": {
        "summary": "Unset a provided spec for a specific API",
        "parameters": [
          {
            "$ref": "#/parameters/apiId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/responses/Success"
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory/{apiId}/specs/reconstructedSpec": {
      "delete": {
        "summary": "Unset a reconstructed spec for a specific API",
        "parameters": [
          {
            "$ref": "#/parameters/apiId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/responses/Success"
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory/{apiId}/suggestedReview": {
      "get": {
        "summary": "Get reconstructed spec for review",
        "parameters": [
          {
            "$ref": "#/parameters/apiId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuggestedReview"
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory/{reviewId}/approvedReview": {
      "post": {
        "summary": "Apply the approved review to create the reconstructed spec",
        "parameters": [
          {
            "$ref": "#/parameters/reviewId"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Approved review",
              "$ref": "#/definitions/ApprovedReview"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/responses/Success"
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/apiUsage/hitCount": {
      "get": {
        "summary": "Get a hit count within a selected timeframe for the filtered API events",
        "parameters": [
          {
            "$ref": "#/parameters/startTime"
          },
          {
            "$ref": "#/parameters/endTime"
          },
          {
            "$ref": "#/parameters/showNonApi"
          },
          {
            "$ref": "#/parameters/methodIsFilter"
          },
          {
            "$ref": "#/parameters/providedPathIDIsFilter"
          },
          {
            "$ref": "#/parameters/reconstructedPathIDIsFilter"
          },
          {
            "$ref": "#/parameters/pathIsFilter"
          },
          {
            "$ref": "#/parameters/pathIsNotFilter"
          },
          {
            "$ref": "#/parameters/pathStartsWithFilter"
          },
          {
            "$ref": "#/parameters/pathEndsWithFilter"
          },
          {
            "$ref": "#/parameters/pathContainsFilter"
          },
          {
            "$ref": "#/parameters/statusCodeIsFilter"
          },
          {
            "$ref": "#/parameters/statusCodeIsNotFilter"
          },
          {
            "$ref": "#/parameters/statusCodeGteFilter"
          },
          {
            "$ref": "#/parameters/statusCodeLteFilter"
          },
          {
            "$ref": "#/parameters/sourceIPIsFilter"
          },
          {
            "$ref": "#/parameters/sourceIPIsNotFilter"
          },
          {
            "$ref": "#/parameters/destinationIPIsFilter"
          },
          {
            "$ref": "#/parameters/destinationIPIsNotFilter"
          },
          {
            "$ref": "#/parameters/destinationPortIsFilter"
          },
          {
            "$ref": "#/parameters/destinationPortIsNotFilter"
          },
          {
            "$ref": "#/parameters/hasSpecDiffFilter"
          },
          {
            "$ref": "#/parameters/specDiffTypeIsFilter"
          },
          {
            "$ref": "#/parameters/specIsFilter"
          },
          {
            "$ref": "#/parameters/specIsNotFilter"
          },
          {
            "$ref": "#/parameters/specStartsWithFilter"
          },
          {
            "$ref": "#/parameters/specEndsWithFilter"
          },
          {
            "$ref": "#/parameters/specContainsFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HitCount"
              }
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/authorizationModel/trace/{traceID}/approve": {
      "put": {
        "parameters": [
          {
            "type": "integer",
            "name": "traceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/authorizationModel/trace/{traceID}/deny": {
      "put": {
        "parameters": [
          {
            "type": "integer",
            "name": "traceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/authorizationModel/{namespace}": {
      "get": {
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthorizationModel"
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/dashboard/apiUsage": {
      "get": {
        "summary": "Get API usage",
        "parameters": [
          {
            "$ref": "#/parameters/startTime"
          },
          {
            "$ref": "#/parameters/endTime"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiUsages"
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/dashboard/apiUsage/latestDiffs": {
      "get": {
        "summary": "Get latest spec diffs",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpecDiffTime"
              }
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    },
    "/dashboard/apiUsage/mostUsed": {
      "get": {
        "summary": "Get most used APIs",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiCount"
              }
            }
          },
          "default": {
            "$ref": "#/responses/UnknownError"
          }
        }
      }
    }
  },
  "definitions": {
    "ApiCount": {
      "type": "object",
      "properties": {
        "apiHostName": {
          "type": "string"
        },
        "apiInfoId": {
          "description": "hold the relevant api info id",
          "type": "integer",
          "format": "uint32"
        },
        "apiPort": {
          "type": "integer"
        },
        "apiType": {
          "$ref": "#/definitions/ApiType"
        },
        "numCalls": {
          "type": "integer"
        }
      }
    },
    "ApiEvent": {
      "type": "object",
      "properties": {
        "apiInfoId": {
          "description": "hold the relevant api spec info id",
          "type": "integer",
          "format": "uint32"
        },
        "apiType": {
          "$ref": "#/definitions/ApiType"
        },
        "bflaStatus": {
          "$ref": "#/definitions/BFLAStatus"
        },
        "destinationIP": {
          "type": "string"
        },
        "destinationK8sObject": {
          "$ref": "#/definitions/K8sObjectRef"
        },
        "destinationPort": {
          "type": "integer"
        },
        "hasProvidedSpecDiff": {
          "type": "boolean",
          "default": false
        },
        "hasReconstructedSpecDiff": {
          "type": "boolean",
          "default": false
        },
        "hostSpecName": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "uint32"
        },
        "method": {
          "$ref": "#/definitions/HttpMethod"
        },
        "path": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "sourceIP": {
          "type": "string"
        },
        "sourceK8sObject": {
          "$ref": "#/definitions/K8sObjectRef"
        },
        "specDiffType": {
          "$ref": "#/definitions/DiffType"
        },
        "statusCode": {
          "type": "integer"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ApiEventPathAndMethods": {
      "type": "object",
      "properties": {
        "methods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HttpMethod"
          }
        },
        "path": {
          "type": "string"
        }
      }
    },
    "ApiEventSortKey": {
      "type": "string",
      "enum": [
        "time",
        "method",
        "path",
        "statusCode",
        "sourceIP",
        "destinationIP",
        "destinationPort",
        "specDiffType",
        "hostSpecName",
        "apiType"
      ]
    },
    "ApiEventSpecDiff": {
      "type": "object",
      "required": [
        "oldSpec",
        "newSpec"
      ],
      "properties": {
        "diffType": {
          "$ref": "#/definitions/DiffType"
        },
        "newSpec": {
          "description": "New spec json string",
          "type": "string"
        },
        "oldSpec": {
          "description": "Old spec json string",
          "type": "string"
        }
      }
    },
    "ApiInfo": {
      "type": "object",
      "properties": {
        "hasProvidedSpec": {
          "type": "boolean",
          "default": false
        },
        "hasReconstructedSpec": {
          "type": "boolean",
          "default": false
        },
        "id": {
          "type": "integer",
          "format": "uint32"
        },
        "name": {
          "description": "API name",
          "type": "string"
        },
        "port": {
          "type": "integer"
        }
      }
    },
    "ApiInventorySortKey": {
      "type": "string",
      "enum": [
        "name",
        "port",
        "hasReconstructedSpec",
        "hasProvidedSpec"
      ]
    },
    "ApiResponse": {
      "description": "An object that is return in all cases of failures.",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "ApiType": {
      "type": "string",
      "enum": [
        "INTERNAL",
        "EXTERNAL"
      ]
    },
    "ApiUsage": {
      "type": "object",
      "properties": {
        "numOfCalls": {
          "type": "integer",
          "x-omitempty": false
        },
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ApiUsages": {
      "type": "object",
      "properties": {
        "apisWithDiff": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiUsage"
          }
        },
        "existingApis": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiUsage"
          }
        },
        "newApis": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiUsage"
          }
        }
      }
    },
    "ApprovedReview": {
      "type": "object",
      "properties": {
        "reviewPathItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReviewPathItem"
          }
        }
      }
    },
    "AuthorizationModel": {
      "properties": {
        "first_trace_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer"
        },
        "learning_ended_at": {
          "type": "string",
          "format": "date-time"
        },
        "namespace": {
          "type": "string"
        },
        "services": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AuthorizationModelService"
          }
        },
        "traces_processed": {
          "type": "integer"
        }
      }
    },
    "AuthorizationModelAudience": {
      "type": "object",
      "properties": {
        "k8s_object": {
          "$ref": "#/definitions/K8sObjectRef"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "AuthorizationModelOperation": {
      "type": "object",
      "properties": {
        "audience": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthorizationModelAudience"
          }
        },
        "method": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "AuthorizationModelService": {
      "type": "object",
      "properties": {
        "k8s_object": {
          "$ref": "#/definitions/K8sObjectRef"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthorizationModelOperation"
          }
        },
        "service_name": {
          "type": "string"
        }
      }
    },
    "BFLAStatus": {
      "type": "string",
      "enum": [
        "NONE",
        "SUSPICIOUS_SRC_DENIED",
        "SUSPICIOUS_SRC_ALLOWED"
      ]
    },
    "DiffType": {
      "type": "string",
      "default": "NO_DIFF",
      "enum": [
        "ZOMBIE_DIFF",
        "SHADOW_DIFF",
        "GENERAL_DIFF",
        "NO_DIFF"
      ]
    },
    "HitCount": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "HttpMethod": {
      "type": "string",
      "enum": [
        "GET",
        "HEAD",
        "POST",
        "PUT",
        "DELETE",
        "CONNECT",
        "OPTIONS",
        "TRACE",
        "PATCH"
      ]
    },
    "K8sObjectRef": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "MethodAndPath": {
      "type": "object",
      "properties": {
        "method": {
          "$ref": "#/definitions/HttpMethod"
        },
        "path": {
          "type": "string"
        },
        "pathId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "OpenApiSpecs": {
      "description": "An object representing the provided and reconstructed API specs",
      "type": "object",
      "properties": {
        "providedSpec": {
          "$ref": "#/definitions/SpecInfo"
        },
        "reconstructedSpec": {
          "$ref": "#/definitions/SpecInfo"
        }
      }
    },
    "ReviewPathItem": {
      "type": "object",
      "properties": {
        "apiEventsPaths": {
          "description": "Group of api event paths (original) that suggestedPath is representing",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiEventPathAndMethods"
          }
        },
        "suggestedPath": {
          "description": "Represents the parameterized path suggested by the engine",
          "type": "string"
        }
      }
    },
    "SpecDiffTime": {
      "type": "object",
      "properties": {
        "apiEventId": {
          "type": "integer",
          "format": "uint32"
        },
        "apiHostName": {
          "type": "string"
        },
        "diffType": {
          "$ref": "#/definitions/DiffType"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SpecInfo": {
      "description": "An object containing info about a spec",
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpecTag"
          }
        }
      }
    },
    "SpecTag": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "methodAndPathList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MethodAndPath"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "SuccessResponse": {
      "description": "An object that is return in cases of success that return nothing.",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "SuggestedReview": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint32"
        },
        "reviewPathItems": {
          "type": "array",
          "items": {
            "description": "The suggested path items",
            "$ref": "#/definitions/ReviewPathItem"
          }
        }
      }
    },
    "rawSpec": {
      "description": "spec in json or yaml format",
      "type": "object",
      "properties": {
        "rawSpec": {
          "description": "spec in json or yaml format",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "apiEventSortKey": {
      "enum": [
        "time",
        "method",
        "path",
        "statusCode",
        "sourceIP",
        "destinationIP",
        "destinationPort",
        "specDiffType",
        "hostSpecName",
        "apiType"
      ],
      "type": "string",
      "description": "Sort key",
      "name": "sortKey",
      "in": "query",
      "required": true
    },
    "apiId": {
      "type": "integer",
      "format": "uint32",
      "name": "apiId",
      "in": "path",
      "required": true
    },
    "apiIdFilter": {
      "type": "string",
      "description": "api id to return",
      "name": "apiId",
      "in": "query"
    },
    "apiInventorySortKey": {
      "enum": [
        "name",
        "port",
        "hasReconstructedSpec",
        "hasProvidedSpec"
      ],
      "type": "string",
      "description": "Sort key",
      "name": "sortKey",
      "in": "query",
      "required": true
    },
    "apiNameContainsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "name[contains]",
      "in": "query"
    },
    "apiNameEndsWithFilter": {
      "type": "string",
      "name": "name[end]",
      "in": "query"
    },
    "apiNameIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "name[is]",
      "in": "query"
    },
    "apiNameIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "name[isNot]",
      "in": "query"
    },
    "apiNameStartsWithFilter": {
      "type": "string",
      "name": "name[start]",
      "in": "query"
    },
    "apiType": {
      "enum": [
        "INTERNAL",
        "EXTERNAL"
      ],
      "type": "string",
      "description": "API type [INTERNAL or EXTERNAL]",
      "name": "type",
      "in": "query",
      "required": true
    },
    "bflaStatusIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "bflaStatus[is]",
      "in": "query"
    },
    "bflaStatusIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "bflaStatus[isNot]",
      "in": "query"
    },
    "destinationIPIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "destinationIP[is]",
      "in": "query"
    },
    "destinationIPIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "destinationIP[isNot]",
      "in": "query"
    },
    "destinationK8sObjectNameIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "destinationK8sObject.name[is]",
      "in": "query"
    },
    "destinationK8sObjectNameIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "destinationK8sObject.name[isNot]",
      "in": "query"
    },
    "destinationPortIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "destinationPort[is]",
      "in": "query"
    },
    "destinationPortIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "destinationPort[isNot]",
      "in": "query"
    },
    "endTime": {
      "type": "string",
      "format": "date-time",
      "description": "End time of the query",
      "name": "endTime",
      "in": "query",
      "required": true
    },
    "hasProvidedSpecFilter": {
      "type": "boolean",
      "name": "hasProvidedSpec[is]",
      "in": "query"
    },
    "hasReconstructedSpecFilter": {
      "type": "boolean",
      "name": "hasReconstructedSpec[is]",
      "in": "query"
    },
    "hasSpecDiffFilter": {
      "type": "boolean",
      "name": "hasSpecDiff[is]",
      "in": "query"
    },
    "methodIsFilter": {
      "type": "array",
      "items": {
        "enum": [
          "GET",
          "HEAD",
          "POST",
          "PUT",
          "DELETE",
          "CONNECT",
          "OPTIONS",
          "TRACE",
          "PATCH"
        ],
        "type": "string"
      },
      "name": "method[is]",
      "in": "query"
    },
    "page": {
      "type": "integer",
      "description": "Page number of the query",
      "name": "page",
      "in": "query",
      "required": true
    },
    "pageSize": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer",
      "description": "Maximum items to return",
      "name": "pageSize",
      "in": "query",
      "required": true
    },
    "pathContainsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "path[contains]",
      "in": "query"
    },
    "pathEndsWithFilter": {
      "type": "string",
      "name": "path[end]",
      "in": "query"
    },
    "pathIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "path[is]",
      "in": "query"
    },
    "pathIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "path[isNot]",
      "in": "query"
    },
    "pathStartsWithFilter": {
      "type": "string",
      "name": "path[start]",
      "in": "query"
    },
    "portIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "port[is]",
      "in": "query"
    },
    "portIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "port[isNot]",
      "in": "query"
    },
    "providedPathIDIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "providedPathID[is]",
      "in": "query"
    },
    "reconstructedPathIDIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "reconstructedPathID[is]",
      "in": "query"
    },
    "reviewId": {
      "type": "integer",
      "format": "uint32",
      "name": "reviewId",
      "in": "path",
      "required": true
    },
    "showNonApi": {
      "type": "boolean",
      "name": "showNonApi",
      "in": "query",
      "required": true
    },
    "sortDir": {
      "enum": [
        "ASC",
        "DESC"
      ],
      "type": "string",
      "default": "ASC",
      "description": "Sorting direction",
      "name": "sortDir",
      "in": "query"
    },
    "sourceIPIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "sourceIP[is]",
      "in": "query"
    },
    "sourceIPIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "sourceIP[isNot]",
      "in": "query"
    },
    "sourceK8sObjectNameIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "sourceK8sObject.name[is]",
      "in": "query"
    },
    "sourceK8sObjectNameIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "sourceK8sObject.name[isNot]",
      "in": "query"
    },
    "specContainsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "spec[contains]",
      "in": "query"
    },
    "specDiffTypeIsFilter": {
      "type": "array",
      "items": {
        "enum": [
          "ZOMBIE_DIFF",
          "SHADOW_DIFF",
          "GENERAL_DIFF",
          "NO_DIFF"
        ],
        "type": "string"
      },
      "name": "specDiffType[is]",
      "in": "query"
    },
    "specEndsWithFilter": {
      "type": "string",
      "name": "spec[end]",
      "in": "query"
    },
    "specIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "spec[is]",
      "in": "query"
    },
    "specIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "spec[isNot]",
      "in": "query"
    },
    "specStartsWithFilter": {
      "type": "string",
      "name": "spec[start]",
      "in": "query"
    },
    "startTime": {
      "type": "string",
      "format": "date-time",
      "description": "Start time of the query",
      "name": "startTime",
      "in": "query",
      "required": true
    },
    "statusCodeGteFilter": {
      "type": "string",
      "description": "greater than or equal",
      "name": "statusCode[gte]",
      "in": "query"
    },
    "statusCodeIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "statusCode[is]",
      "in": "query"
    },
    "statusCodeIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "statusCode[isNot]",
      "in": "query"
    },
    "statusCodeLteFilter": {
      "type": "string",
      "description": "less than or equal",
      "name": "statusCode[lte]",
      "in": "query"
    }
  },
  "responses": {
    "Success": {
      "description": "success message",
      "schema": {
        "$ref": "#/definitions/SuccessResponse"
      }
    },
    "UnknownError": {
      "description": "unknown error",
      "schema": {
        "$ref": "#/definitions/ApiResponse"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "APIClarity APIs",
    "version": "1.0.0"
  },
  "basePath": "/api",
  "paths": {
    "/apiEvents": {
      "get": {
        "summary": "Get API events",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Start time of the query",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "End time of the query",
            "name": "endTime",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Page number of the query",
            "name": "page",
            "in": "query",
            "required": true
          },
          {
            "maximum": 50,
            "minimum": 1,
            "type": "integer",
            "description": "Maximum items to return",
            "name": "pageSize",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "time",
              "method",
              "path",
              "statusCode",
              "sourceIP",
              "destinationIP",
              "destinationPort",
              "specDiffType",
              "hostSpecName",
              "apiType"
            ],
            "type": "string",
            "description": "Sort key",
            "name": "sortKey",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "ASC",
              "DESC"
            ],
            "type": "string",
            "default": "ASC",
            "description": "Sorting direction",
            "name": "sortDir",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "showNonApi",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "GET",
                "HEAD",
                "POST",
                "PUT",
                "DELETE",
                "CONNECT",
                "OPTIONS",
                "TRACE",
                "PATCH"
              ],
              "type": "string"
            },
            "name": "method[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "path[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "path[isNot]",
            "in": "query"
          },
          {
            "type": "string",
            "name": "path[start]",
            "in": "query"
          },
          {
            "type": "string",
            "name": "path[end]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "path[contains]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "statusCode[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "statusCode[isNot]",
            "in": "query"
          },
          {
            "type": "string",
            "description": "greater than or equal",
            "name": "statusCode[gte]",
            "in": "query"
          },
          {
            "type": "string",
            "description": "less than or equal",
            "name": "statusCode[lte]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "sourceIP[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "sourceIP[isNot]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "destinationIP[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "destinationIP[isNot]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "destinationPort[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "destinationPort[isNot]",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "hasSpecDiff[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "ZOMBIE_DIFF",
                "SHADOW_DIFF",
                "GENERAL_DIFF",
                "NO_DIFF"
              ],
              "type": "string"
            },
            "name": "specDiffType[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "spec[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "spec[isNot]",
            "in": "query"
          },
          {
            "type": "string",
            "name": "spec[start]",
            "in": "query"
          },
          {
            "type": "string",
            "name": "spec[end]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "spec[contains]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "destinationK8sObject.name[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "destinationK8sObject.name[isNot]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "sourceK8sObject.name[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "sourceK8sObject.name[isNot]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "bflaStatus[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "bflaStatus[isNot]",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "required": [
                "total"
              ],
              "properties": {
                "items": {
                  "description": "List of API events in the given time range, filters and page. List length must be lower or equal to pageSize",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ApiEvent"
                  }
                },
                "total": {
                  "description": "Total events count in the given time range and filters",
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/apiEvents/{eventId}": {
      "get": {
        "summary": "Get API event",
        "parameters": [
          {
            "type": "integer",
            "format": "uint32",
            "description": "API event ID",
            "name": "eventId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiEvent"
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/apiEvents/{eventId}/providedSpecDiff": {
      "get": {
        "summary": "Get API event provided spec diff",
        "parameters": [
          {
            "type": "integer",
            "format": "uint32",
            "description": "API event ID",
            "name": "eventId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiEventSpecDiff"
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/apiEvents/{eventId}/reconstructedSpecDiff": {
      "get": {
        "summary": "Get API event reconstructed spec diff",
        "parameters": [
          {
            "type": "integer",
            "format": "uint32",
            "description": "API event ID",
            "name": "eventId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiEventSpecDiff"
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/apiInventory": {
      "get": {
        "summary": "Get API inventory",
        "parameters": [
          {
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ],
            "type": "string",
            "description": "API type [INTERNAL or EXTERNAL]",
            "name": "type",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Page number of the query",
            "name": "page",
            "in": "query",
            "required": true
          },
          {
            "maximum": 50,
            "minimum": 1,
            "type": "integer",
            "description": "Maximum items to return",
            "name": "pageSize",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "name",
              "port",
              "hasReconstructedSpec",
              "hasProvidedSpec"
            ],
            "type": "string",
            "description": "Sort key",
            "name": "sortKey",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "ASC",
              "DESC"
            ],
            "type": "string",
            "default": "ASC",
            "description": "Sorting direction",
            "name": "sortDir",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "name[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "name[isNot]",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name[start]",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name[end]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "name[contains]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "port[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "port[isNot]",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "hasProvidedSpec[is]",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "hasReconstructedSpec[is]",
            "in": "query"
          },
          {
            "type": "string",
            "description": "api id to return",
            "name": "apiId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "required": [
                "total"
              ],
              "properties": {
                "items": {
                  "description": "List of filtered APIs in the given page. List length must be lower or equal to pageSize",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ApiInfo"
                  }
                },
                "total": {
                  "description": "Total filtered APIs count",
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/apiInventory/{apiId}/provided_swagger.json": {
      "get": {
        "summary": "Get provided API spec json file",
        "parameters": [
          {
            "type": "integer",
            "format": "uint32",
            "name": "apiId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "spec in json format",
              "type": "object"
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/apiInventory/{apiId}/reconstructed_swagger.json": {
      "get": {
        "summary": "Get reconstructed API spec json file",
        "parameters": [
          {
            "type": "integer",
            "format": "uint32",
            "name": "apiId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "spec in json format",
              "type": "object"
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/apiInventory/{apiId}/specs": {
      "get": {
        "summary": "Get provided and reconstructed open api specs for a specific API",
        "parameters": [
          {
            "type": "integer",
            "format": "uint32",
            "name": "apiId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OpenApiSpecs"
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/apiInventory/{apiId}/specs/providedSpec": {
      "put": {
        "summary": "Add or edit a spec for a specific API",
        "parameters": [
          {
            "type": "integer",
            "format": "uint32",
            "name": "apiId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Json or Yaml representing openapi spec V2",
              "$ref": "#/definitions/rawSpec"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/rawSpec"
            }
          },
          "400": {
            "description": "Spec validation failure",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "summary": "Unset a provided spec for a specific API",
        "parameters": [
          {
            "type": "integer",
            "format": "uint32",
            "name": "apiId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "success message",
              "schema": {
                "$ref": "#/definitions/SuccessResponse"
              }
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/apiInventory/{apiId}/specs/reconstructedSpec": {
      "delete": {
        "summary": "Unset a reconstructed spec for a specific API",
        "parameters": [
          {
            "type": "integer",
            "format": "uint32",
            "name": "apiId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "success message",
              "schema": {
                "$ref": "#/definitions/SuccessResponse"
              }
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/apiInventory/{apiId}/suggestedReview": {
      "get": {
        "summary": "Get reconstructed spec for review",
        "parameters": [
          {
            "type": "integer",
            "format": "uint32",
            "name": "apiId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuggestedReview"
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/apiInventory/{reviewId}/approvedReview": {
      "post": {
        "summary": "Apply the approved review to create the reconstructed spec",
        "parameters": [
          {
            "type": "integer",
            "format": "uint32",
            "name": "reviewId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Approved review",
              "$ref": "#/definitions/ApprovedReview"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "success message",
              "schema": {
                "$ref": "#/definitions/SuccessResponse"
              }
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/apiUsage/hitCount": {
      "get": {
        "summary": "Get a hit count within a selected timeframe for the filtered API events",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Start time of the query",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "End time of the query",
            "name": "endTime",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "name": "showNonApi",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "GET",
                "HEAD",
                "POST",
                "PUT",
                "DELETE",
                "CONNECT",
                "OPTIONS",
                "TRACE",
                "PATCH"
              ],
              "type": "string"
            },
            "name": "method[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "providedPathID[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "reconstructedPathID[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "path[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "path[isNot]",
            "in": "query"
          },
          {
            "type": "string",
            "name": "path[start]",
            "in": "query"
          },
          {
            "type": "string",
            "name": "path[end]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "path[contains]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "statusCode[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "statusCode[isNot]",
            "in": "query"
          },
          {
            "type": "string",
            "description": "greater than or equal",
            "name": "statusCode[gte]",
            "in": "query"
          },
          {
            "type": "string",
            "description": "less than or equal",
            "name": "statusCode[lte]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "sourceIP[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "sourceIP[isNot]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "destinationIP[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "destinationIP[isNot]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "destinationPort[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "destinationPort[isNot]",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "hasSpecDiff[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "ZOMBIE_DIFF",
                "SHADOW_DIFF",
                "GENERAL_DIFF",
                "NO_DIFF"
              ],
              "type": "string"
            },
            "name": "specDiffType[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "spec[is]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "spec[isNot]",
            "in": "query"
          },
          {
            "type": "string",
            "name": "spec[start]",
            "in": "query"
          },
          {
            "type": "string",
            "name": "spec[end]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "spec[contains]",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HitCount"
              }
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/authorizationModel/trace/{traceID}/approve": {
      "put": {
        "parameters": [
          {
            "type": "integer",
            "name": "traceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/authorizationModel/trace/{traceID}/deny": {
      "put": {
        "parameters": [
          {
            "type": "integer",
            "name": "traceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/authorizationModel/{namespace}": {
      "get": {
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthorizationModel"
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/dashboard/apiUsage": {
      "get": {
        "summary": "Get API usage",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Start time of the query",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "End time of the query",
            "name": "endTime",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiUsages"
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/dashboard/apiUsage/latestDiffs": {
      "get": {
        "summary": "Get latest spec diffs",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpecDiffTime"
              }
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/dashboard/apiUsage/mostUsed": {
      "get": {
        "summary": "Get most used APIs",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiCount"
              }
            }
          },
          "default": {
            "description": "unknown error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApiCount": {
      "type": "object",
      "properties": {
        "apiHostName": {
          "type": "string"
        },
        "apiInfoId": {
          "description": "hold the relevant api info id",
          "type": "integer",
          "format": "uint32"
        },
        "apiPort": {
          "type": "integer"
        },
        "apiType": {
          "$ref": "#/definitions/ApiType"
        },
        "numCalls": {
          "type": "integer"
        }
      }
    },
    "ApiEvent": {
      "type": "object",
      "properties": {
        "apiInfoId": {
          "description": "hold the relevant api spec info id",
          "type": "integer",
          "format": "uint32"
        },
        "apiType": {
          "$ref": "#/definitions/ApiType"
        },
        "bflaStatus": {
          "$ref": "#/definitions/BFLAStatus"
        },
        "destinationIP": {
          "type": "string"
        },
        "destinationK8sObject": {
          "$ref": "#/definitions/K8sObjectRef"
        },
        "destinationPort": {
          "type": "integer"
        },
        "hasProvidedSpecDiff": {
          "type": "boolean",
          "default": false
        },
        "hasReconstructedSpecDiff": {
          "type": "boolean",
          "default": false
        },
        "hostSpecName": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "uint32"
        },
        "method": {
          "$ref": "#/definitions/HttpMethod"
        },
        "path": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "sourceIP": {
          "type": "string"
        },
        "sourceK8sObject": {
          "$ref": "#/definitions/K8sObjectRef"
        },
        "specDiffType": {
          "$ref": "#/definitions/DiffType"
        },
        "statusCode": {
          "type": "integer"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ApiEventPathAndMethods": {
      "type": "object",
      "properties": {
        "methods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HttpMethod"
          }
        },
        "path": {
          "type": "string"
        }
      }
    },
    "ApiEventSortKey": {
      "type": "string",
      "enum": [
        "time",
        "method",
        "path",
        "statusCode",
        "sourceIP",
        "destinationIP",
        "destinationPort",
        "specDiffType",
        "hostSpecName",
        "apiType"
      ]
    },
    "ApiEventSpecDiff": {
      "type": "object",
      "required": [
        "oldSpec",
        "newSpec"
      ],
      "properties": {
        "diffType": {
          "$ref": "#/definitions/DiffType"
        },
        "newSpec": {
          "description": "New spec json string",
          "type": "string"
        },
        "oldSpec": {
          "description": "Old spec json string",
          "type": "string"
        }
      }
    },
    "ApiInfo": {
      "type": "object",
      "properties": {
        "hasProvidedSpec": {
          "type": "boolean",
          "default": false
        },
        "hasReconstructedSpec": {
          "type": "boolean",
          "default": false
        },
        "id": {
          "type": "integer",
          "format": "uint32"
        },
        "name": {
          "description": "API name",
          "type": "string"
        },
        "port": {
          "type": "integer"
        }
      }
    },
    "ApiInventorySortKey": {
      "type": "string",
      "enum": [
        "name",
        "port",
        "hasReconstructedSpec",
        "hasProvidedSpec"
      ]
    },
    "ApiResponse": {
      "description": "An object that is return in all cases of failures.",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "ApiType": {
      "type": "string",
      "enum": [
        "INTERNAL",
        "EXTERNAL"
      ]
    },
    "ApiUsage": {
      "type": "object",
      "properties": {
        "numOfCalls": {
          "type": "integer",
          "x-omitempty": false
        },
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ApiUsages": {
      "type": "object",
      "properties": {
        "apisWithDiff": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiUsage"
          }
        },
        "existingApis": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiUsage"
          }
        },
        "newApis": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiUsage"
          }
        }
      }
    },
    "ApprovedReview": {
      "type": "object",
      "properties": {
        "reviewPathItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReviewPathItem"
          }
        }
      }
    },
    "AuthorizationModel": {
      "properties": {
        "first_trace_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer"
        },
        "learning_ended_at": {
          "type": "string",
          "format": "date-time"
        },
        "namespace": {
          "type": "string"
        },
        "services": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AuthorizationModelService"
          }
        },
        "traces_processed": {
          "type": "integer"
        }
      }
    },
    "AuthorizationModelAudience": {
      "type": "object",
      "properties": {
        "k8s_object": {
          "$ref": "#/definitions/K8sObjectRef"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "AuthorizationModelOperation": {
      "type": "object",
      "properties": {
        "audience": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthorizationModelAudience"
          }
        },
        "method": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "AuthorizationModelService": {
      "type": "object",
      "properties": {
        "k8s_object": {
          "$ref": "#/definitions/K8sObjectRef"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthorizationModelOperation"
          }
        },
        "service_name": {
          "type": "string"
        }
      }
    },
    "BFLAStatus": {
      "type": "string",
      "enum": [
        "NONE",
        "SUSPICIOUS_SRC_DENIED",
        "SUSPICIOUS_SRC_ALLOWED"
      ]
    },
    "DiffType": {
      "type": "string",
      "default": "NO_DIFF",
      "enum": [
        "ZOMBIE_DIFF",
        "SHADOW_DIFF",
        "GENERAL_DIFF",
        "NO_DIFF"
      ]
    },
    "HitCount": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "HttpMethod": {
      "type": "string",
      "enum": [
        "GET",
        "HEAD",
        "POST",
        "PUT",
        "DELETE",
        "CONNECT",
        "OPTIONS",
        "TRACE",
        "PATCH"
      ]
    },
    "K8sObjectRef": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "MethodAndPath": {
      "type": "object",
      "properties": {
        "method": {
          "$ref": "#/definitions/HttpMethod"
        },
        "path": {
          "type": "string"
        },
        "pathId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "OpenApiSpecs": {
      "description": "An object representing the provided and reconstructed API specs",
      "type": "object",
      "properties": {
        "providedSpec": {
          "$ref": "#/definitions/SpecInfo"
        },
        "reconstructedSpec": {
          "$ref": "#/definitions/SpecInfo"
        }
      }
    },
    "ReviewPathItem": {
      "type": "object",
      "properties": {
        "apiEventsPaths": {
          "description": "Group of api event paths (original) that suggestedPath is representing",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiEventPathAndMethods"
          }
        },
        "suggestedPath": {
          "description": "Represents the parameterized path suggested by the engine",
          "type": "string"
        }
      }
    },
    "SpecDiffTime": {
      "type": "object",
      "properties": {
        "apiEventId": {
          "type": "integer",
          "format": "uint32"
        },
        "apiHostName": {
          "type": "string"
        },
        "diffType": {
          "$ref": "#/definitions/DiffType"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SpecInfo": {
      "description": "An object containing info about a spec",
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpecTag"
          }
        }
      }
    },
    "SpecTag": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "methodAndPathList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MethodAndPath"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "SuccessResponse": {
      "description": "An object that is return in cases of success that return nothing.",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "SuggestedReview": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint32"
        },
        "reviewPathItems": {
          "type": "array",
          "items": {
            "description": "The suggested path items",
            "$ref": "#/definitions/ReviewPathItem"
          }
        }
      }
    },
    "rawSpec": {
      "description": "spec in json or yaml format",
      "type": "object",
      "properties": {
        "rawSpec": {
          "description": "spec in json or yaml format",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "apiEventSortKey": {
      "enum": [
        "time",
        "method",
        "path",
        "statusCode",
        "sourceIP",
        "destinationIP",
        "destinationPort",
        "specDiffType",
        "hostSpecName",
        "apiType"
      ],
      "type": "string",
      "description": "Sort key",
      "name": "sortKey",
      "in": "query",
      "required": true
    },
    "apiId": {
      "type": "integer",
      "format": "uint32",
      "name": "apiId",
      "in": "path",
      "required": true
    },
    "apiIdFilter": {
      "type": "string",
      "description": "api id to return",
      "name": "apiId",
      "in": "query"
    },
    "apiInventorySortKey": {
      "enum": [
        "name",
        "port",
        "hasReconstructedSpec",
        "hasProvidedSpec"
      ],
      "type": "string",
      "description": "Sort key",
      "name": "sortKey",
      "in": "query",
      "required": true
    },
    "apiNameContainsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "name[contains]",
      "in": "query"
    },
    "apiNameEndsWithFilter": {
      "type": "string",
      "name": "name[end]",
      "in": "query"
    },
    "apiNameIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "name[is]",
      "in": "query"
    },
    "apiNameIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "name[isNot]",
      "in": "query"
    },
    "apiNameStartsWithFilter": {
      "type": "string",
      "name": "name[start]",
      "in": "query"
    },
    "apiType": {
      "enum": [
        "INTERNAL",
        "EXTERNAL"
      ],
      "type": "string",
      "description": "API type [INTERNAL or EXTERNAL]",
      "name": "type",
      "in": "query",
      "required": true
    },
    "bflaStatusIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "bflaStatus[is]",
      "in": "query"
    },
    "bflaStatusIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "bflaStatus[isNot]",
      "in": "query"
    },
    "destinationIPIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "destinationIP[is]",
      "in": "query"
    },
    "destinationIPIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "destinationIP[isNot]",
      "in": "query"
    },
    "destinationK8sObjectNameIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "destinationK8sObject.name[is]",
      "in": "query"
    },
    "destinationK8sObjectNameIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "destinationK8sObject.name[isNot]",
      "in": "query"
    },
    "destinationPortIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "destinationPort[is]",
      "in": "query"
    },
    "destinationPortIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "destinationPort[isNot]",
      "in": "query"
    },
    "endTime": {
      "type": "string",
      "format": "date-time",
      "description": "End time of the query",
      "name": "endTime",
      "in": "query",
      "required": true
    },
    "hasProvidedSpecFilter": {
      "type": "boolean",
      "name": "hasProvidedSpec[is]",
      "in": "query"
    },
    "hasReconstructedSpecFilter": {
      "type": "boolean",
      "name": "hasReconstructedSpec[is]",
      "in": "query"
    },
    "hasSpecDiffFilter": {
      "type": "boolean",
      "name": "hasSpecDiff[is]",
      "in": "query"
    },
    "methodIsFilter": {
      "type": "array",
      "items": {
        "enum": [
          "GET",
          "HEAD",
          "POST",
          "PUT",
          "DELETE",
          "CONNECT",
          "OPTIONS",
          "TRACE",
          "PATCH"
        ],
        "type": "string"
      },
      "name": "method[is]",
      "in": "query"
    },
    "page": {
      "type": "integer",
      "description": "Page number of the query",
      "name": "page",
      "in": "query",
      "required": true
    },
    "pageSize": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer",
      "description": "Maximum items to return",
      "name": "pageSize",
      "in": "query",
      "required": true
    },
    "pathContainsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "path[contains]",
      "in": "query"
    },
    "pathEndsWithFilter": {
      "type": "string",
      "name": "path[end]",
      "in": "query"
    },
    "pathIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "path[is]",
      "in": "query"
    },
    "pathIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "path[isNot]",
      "in": "query"
    },
    "pathStartsWithFilter": {
      "type": "string",
      "name": "path[start]",
      "in": "query"
    },
    "portIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "port[is]",
      "in": "query"
    },
    "portIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "port[isNot]",
      "in": "query"
    },
    "providedPathIDIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "providedPathID[is]",
      "in": "query"
    },
    "reconstructedPathIDIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "reconstructedPathID[is]",
      "in": "query"
    },
    "reviewId": {
      "type": "integer",
      "format": "uint32",
      "name": "reviewId",
      "in": "path",
      "required": true
    },
    "showNonApi": {
      "type": "boolean",
      "name": "showNonApi",
      "in": "query",
      "required": true
    },
    "sortDir": {
      "enum": [
        "ASC",
        "DESC"
      ],
      "type": "string",
      "default": "ASC",
      "description": "Sorting direction",
      "name": "sortDir",
      "in": "query"
    },
    "sourceIPIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "sourceIP[is]",
      "in": "query"
    },
    "sourceIPIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "sourceIP[isNot]",
      "in": "query"
    },
    "sourceK8sObjectNameIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "sourceK8sObject.name[is]",
      "in": "query"
    },
    "sourceK8sObjectNameIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "sourceK8sObject.name[isNot]",
      "in": "query"
    },
    "specContainsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "spec[contains]",
      "in": "query"
    },
    "specDiffTypeIsFilter": {
      "type": "array",
      "items": {
        "enum": [
          "ZOMBIE_DIFF",
          "SHADOW_DIFF",
          "GENERAL_DIFF",
          "NO_DIFF"
        ],
        "type": "string"
      },
      "name": "specDiffType[is]",
      "in": "query"
    },
    "specEndsWithFilter": {
      "type": "string",
      "name": "spec[end]",
      "in": "query"
    },
    "specIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "spec[is]",
      "in": "query"
    },
    "specIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "spec[isNot]",
      "in": "query"
    },
    "specStartsWithFilter": {
      "type": "string",
      "name": "spec[start]",
      "in": "query"
    },
    "startTime": {
      "type": "string",
      "format": "date-time",
      "description": "Start time of the query",
      "name": "startTime",
      "in": "query",
      "required": true
    },
    "statusCodeGteFilter": {
      "type": "string",
      "description": "greater than or equal",
      "name": "statusCode[gte]",
      "in": "query"
    },
    "statusCodeIsFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "statusCode[is]",
      "in": "query"
    },
    "statusCodeIsNotFilter": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "name": "statusCode[isNot]",
      "in": "query"
    },
    "statusCodeLteFilter": {
      "type": "string",
      "description": "less than or equal",
      "name": "statusCode[lte]",
      "in": "query"
    }
  },
  "responses": {
    "Success": {
      "description": "success message",
      "schema": {
        "$ref": "#/definitions/SuccessResponse"
      }
    },
    "UnknownError": {
      "description": "unknown error",
      "schema": {
        "$ref": "#/definitions/ApiResponse"
      }
    }
  }
}`))
}
