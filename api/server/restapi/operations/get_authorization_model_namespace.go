// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAuthorizationModelNamespaceHandlerFunc turns a function with the right signature into a get authorization model namespace handler
type GetAuthorizationModelNamespaceHandlerFunc func(GetAuthorizationModelNamespaceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAuthorizationModelNamespaceHandlerFunc) Handle(params GetAuthorizationModelNamespaceParams) middleware.Responder {
	return fn(params)
}

// GetAuthorizationModelNamespaceHandler interface for that can handle valid get authorization model namespace params
type GetAuthorizationModelNamespaceHandler interface {
	Handle(GetAuthorizationModelNamespaceParams) middleware.Responder
}

// NewGetAuthorizationModelNamespace creates a new http.Handler for the get authorization model namespace operation
func NewGetAuthorizationModelNamespace(ctx *middleware.Context, handler GetAuthorizationModelNamespaceHandler) *GetAuthorizationModelNamespace {
	return &GetAuthorizationModelNamespace{Context: ctx, Handler: handler}
}

/* GetAuthorizationModelNamespace swagger:route GET /authorizationModel/{namespace} getAuthorizationModelNamespace

GetAuthorizationModelNamespace get authorization model namespace API

*/
type GetAuthorizationModelNamespace struct {
	Context *middleware.Context
	Handler GetAuthorizationModelNamespaceHandler
}

func (o *GetAuthorizationModelNamespace) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAuthorizationModelNamespaceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
