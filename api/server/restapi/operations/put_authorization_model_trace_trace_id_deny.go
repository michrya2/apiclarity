// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutAuthorizationModelTraceTraceIDDenyHandlerFunc turns a function with the right signature into a put authorization model trace trace ID deny handler
type PutAuthorizationModelTraceTraceIDDenyHandlerFunc func(PutAuthorizationModelTraceTraceIDDenyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutAuthorizationModelTraceTraceIDDenyHandlerFunc) Handle(params PutAuthorizationModelTraceTraceIDDenyParams) middleware.Responder {
	return fn(params)
}

// PutAuthorizationModelTraceTraceIDDenyHandler interface for that can handle valid put authorization model trace trace ID deny params
type PutAuthorizationModelTraceTraceIDDenyHandler interface {
	Handle(PutAuthorizationModelTraceTraceIDDenyParams) middleware.Responder
}

// NewPutAuthorizationModelTraceTraceIDDeny creates a new http.Handler for the put authorization model trace trace ID deny operation
func NewPutAuthorizationModelTraceTraceIDDeny(ctx *middleware.Context, handler PutAuthorizationModelTraceTraceIDDenyHandler) *PutAuthorizationModelTraceTraceIDDeny {
	return &PutAuthorizationModelTraceTraceIDDeny{Context: ctx, Handler: handler}
}

/* PutAuthorizationModelTraceTraceIDDeny swagger:route PUT /authorizationModel/trace/{traceID}/deny putAuthorizationModelTraceTraceIdDeny

PutAuthorizationModelTraceTraceIDDeny put authorization model trace trace ID deny API

*/
type PutAuthorizationModelTraceTraceIDDeny struct {
	Context *middleware.Context
	Handler PutAuthorizationModelTraceTraceIDDenyHandler
}

func (o *PutAuthorizationModelTraceTraceIDDeny) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutAuthorizationModelTraceTraceIDDenyParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
