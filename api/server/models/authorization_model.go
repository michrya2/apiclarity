// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthorizationModel authorization model
//
// swagger:model AuthorizationModel
type AuthorizationModel struct {

	// first trace at
	// Format: date-time
	FirstTraceAt strfmt.DateTime `json:"first_trace_at,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// learning ended at
	// Format: date-time
	LearningEndedAt strfmt.DateTime `json:"learning_ended_at,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// services
	Services map[string]AuthorizationModelService `json:"services,omitempty"`

	// traces processed
	TracesProcessed int64 `json:"traces_processed,omitempty"`
}

// Validate validates this authorization model
func (m *AuthorizationModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstTraceAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLearningEndedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorizationModel) validateFirstTraceAt(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstTraceAt) { // not required
		return nil
	}

	if err := validate.FormatOf("first_trace_at", "body", "date-time", m.FirstTraceAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationModel) validateLearningEndedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LearningEndedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("learning_ended_at", "body", "date-time", m.LearningEndedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationModel) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for k := range m.Services {

		if err := validate.Required("services"+"."+k, "body", m.Services[k]); err != nil {
			return err
		}
		if val, ok := m.Services[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this authorization model based on the context it is used
func (m *AuthorizationModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorizationModel) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Services {

		if val, ok := m.Services[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthorizationModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthorizationModel) UnmarshalBinary(b []byte) error {
	var res AuthorizationModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
