// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIEvent Api event
//
// swagger:model ApiEvent
type APIEvent struct {

	// hold the relevant api spec info id
	APIInfoID uint32 `json:"apiInfoId,omitempty"`

	// api type
	APIType APIType `json:"apiType,omitempty"`

	// bfla status
	BflaStatus BFLAStatus `json:"bflaStatus,omitempty"`

	// destination IP
	DestinationIP string `json:"destinationIP,omitempty"`

	// destination k8s object
	DestinationK8sObject *K8sObjectRef `json:"destinationK8sObject,omitempty"`

	// destination port
	DestinationPort int64 `json:"destinationPort,omitempty"`

	// has provided spec diff
	HasProvidedSpecDiff *bool `json:"hasProvidedSpecDiff,omitempty"`

	// has reconstructed spec diff
	HasReconstructedSpecDiff *bool `json:"hasReconstructedSpecDiff,omitempty"`

	// host spec name
	HostSpecName string `json:"hostSpecName,omitempty"`

	// id
	ID uint32 `json:"id,omitempty"`

	// method
	Method HTTPMethod `json:"method,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// query
	Query string `json:"query,omitempty"`

	// source IP
	SourceIP string `json:"sourceIP,omitempty"`

	// source k8s object
	SourceK8sObject *K8sObjectRef `json:"sourceK8sObject,omitempty"`

	// spec diff type
	SpecDiffType *DiffType `json:"specDiffType,omitempty"`

	// status code
	StatusCode int64 `json:"statusCode,omitempty"`

	// time
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`
}

// Validate validates this Api event
func (m *APIEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBflaStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationK8sObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceK8sObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpecDiffType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIEvent) validateAPIType(formats strfmt.Registry) error {
	if swag.IsZero(m.APIType) { // not required
		return nil
	}

	if err := m.APIType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("apiType")
		}
		return err
	}

	return nil
}

func (m *APIEvent) validateBflaStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.BflaStatus) { // not required
		return nil
	}

	if err := m.BflaStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("bflaStatus")
		}
		return err
	}

	return nil
}

func (m *APIEvent) validateDestinationK8sObject(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationK8sObject) { // not required
		return nil
	}

	if m.DestinationK8sObject != nil {
		if err := m.DestinationK8sObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationK8sObject")
			}
			return err
		}
	}

	return nil
}

func (m *APIEvent) validateMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.Method) { // not required
		return nil
	}

	if err := m.Method.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("method")
		}
		return err
	}

	return nil
}

func (m *APIEvent) validateSourceK8sObject(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceK8sObject) { // not required
		return nil
	}

	if m.SourceK8sObject != nil {
		if err := m.SourceK8sObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceK8sObject")
			}
			return err
		}
	}

	return nil
}

func (m *APIEvent) validateSpecDiffType(formats strfmt.Registry) error {
	if swag.IsZero(m.SpecDiffType) { // not required
		return nil
	}

	if m.SpecDiffType != nil {
		if err := m.SpecDiffType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("specDiffType")
			}
			return err
		}
	}

	return nil
}

func (m *APIEvent) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this Api event based on the context it is used
func (m *APIEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAPIType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBflaStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationK8sObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceK8sObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpecDiffType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIEvent) contextValidateAPIType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.APIType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("apiType")
		}
		return err
	}

	return nil
}

func (m *APIEvent) contextValidateBflaStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.BflaStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("bflaStatus")
		}
		return err
	}

	return nil
}

func (m *APIEvent) contextValidateDestinationK8sObject(ctx context.Context, formats strfmt.Registry) error {

	if m.DestinationK8sObject != nil {
		if err := m.DestinationK8sObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationK8sObject")
			}
			return err
		}
	}

	return nil
}

func (m *APIEvent) contextValidateMethod(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Method.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("method")
		}
		return err
	}

	return nil
}

func (m *APIEvent) contextValidateSourceK8sObject(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceK8sObject != nil {
		if err := m.SourceK8sObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceK8sObject")
			}
			return err
		}
	}

	return nil
}

func (m *APIEvent) contextValidateSpecDiffType(ctx context.Context, formats strfmt.Registry) error {

	if m.SpecDiffType != nil {
		if err := m.SpecDiffType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("specDiffType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIEvent) UnmarshalBinary(b []byte) error {
	var res APIEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
