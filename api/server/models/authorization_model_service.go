// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuthorizationModelService authorization model service
//
// swagger:model AuthorizationModelService
type AuthorizationModelService struct {

	// k8s object
	K8sObject *K8sObjectRef `json:"k8s_object,omitempty"`

	// operations
	Operations []*AuthorizationModelOperation `json:"operations"`

	// service name
	ServiceName string `json:"service_name,omitempty"`
}

// Validate validates this authorization model service
func (m *AuthorizationModelService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateK8sObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorizationModelService) validateK8sObject(formats strfmt.Registry) error {
	if swag.IsZero(m.K8sObject) { // not required
		return nil
	}

	if m.K8sObject != nil {
		if err := m.K8sObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("k8s_object")
			}
			return err
		}
	}

	return nil
}

func (m *AuthorizationModelService) validateOperations(formats strfmt.Registry) error {
	if swag.IsZero(m.Operations) { // not required
		return nil
	}

	for i := 0; i < len(m.Operations); i++ {
		if swag.IsZero(m.Operations[i]) { // not required
			continue
		}

		if m.Operations[i] != nil {
			if err := m.Operations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("operations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this authorization model service based on the context it is used
func (m *AuthorizationModelService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateK8sObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorizationModelService) contextValidateK8sObject(ctx context.Context, formats strfmt.Registry) error {

	if m.K8sObject != nil {
		if err := m.K8sObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("k8s_object")
			}
			return err
		}
	}

	return nil
}

func (m *AuthorizationModelService) contextValidateOperations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Operations); i++ {

		if m.Operations[i] != nil {
			if err := m.Operations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("operations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthorizationModelService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthorizationModelService) UnmarshalBinary(b []byte) error {
	var res AuthorizationModelService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
